Noções de Recursividade:

obs: int_min: constante com o menor número negativo -> biblioteca <limits.h>

  -exemplo:
  função fatorial matemática:

    n!{ 
        1, n = 0
        n * (n-1)!, n>0
    }  

  -em c:
    int fat(int n){
        if (n < 0) return int_min;
        if (n == 0) return 1;
        return n * fat(n - 1);
    }

    // exemplo, se vc chama um fat(3), ele vai fazer 3 * fat(2), que chama fat(2), que faz 2 * fat(1), que chama fat(1), que faz
    1 * fat(0), que chama fat(0), que retorna 1, então vai multiplicando voltando as chamadas, primeiro o 1 * 1, depois 2 * 1,
    depois 3 * 2, depois retorna pra função que a chamou.



Macros:
  -#include -> inclui um arquivo ou biblioteca;
  -#define PI 3.141516 -> aumenta ou diminui a precisão do pi;
  -#define maior(a,b) ((a) > (b) ? (a) : (b));
    mesma coisa que:
        int maior(int a, int b) {
            if(a >=b) return a;
            return b;
        };
  -#define prod(a,b) ((a) * (b));         // precisa dos parenteses, se nao tivesse parenteses o exemplo ali de baixo ia imprimir
                                             3 + (4 * 2);
    int main(void) {
        int x = prod(3+4, 2);
        .
        .                                 // função que calcula o produto  
        .
        return 0;
    }      


Variáveis Estáticas:

    #include <stdio.h>

    void f(char c, int k){
        static int i = 0;             // declara uma vez, e depois a cada chamada de função ele guarda o novo valor;
        printf("%c", c);
        i++;
        if((i % k) == 0) printf("\n");
    }
                                         // esse codigo printa 3 vezes o caracter *, ou seja, k vezes o caracter c;
    int main(void) {
        int i, n;
        do {
            scanf("%d", &n);
        } while (n<=0);
        for (i = 0; i<n; i++) f('*', 3);
        return 0;
    }



VETORES:

  *Primeira estrutura de dados investigada:
    variável que guarda n espaços contíguos de memória

  -exemplo:
    int vet[10];  // cria um vetor de tamanho 10, ou seja, do índice 0 até o 9;

    vet[0] = 3; // bota o valor 3 no espaço 0
    vet[9] = 2; // bota o valor 2 no espaço 9

    int vet2[] = {1, 3, 2}; // cria um vetor de tamanho 3, ou seja: int vet2[3] = {1, 3, 2}

    int vet3[n]; // cria um vetor de tamanho n, mas não pode atualizar o tamanho desse vetor;

    OBS: VETOR NAO PODE MUDAR DE TAMANHO!!!

    Pra chamar um vetor numa função, se faz assim:
        função para leitura:
        void vet_leit(int *vet, int n) // ou int vet[] {
            int i;
            for (i = 0; i<n; i++)                  // pede um valor pra cada posição do vetor
                scanf("%d", &vet[i]);
        }

        função para escrita:
        void vet_escr(int *vet, int n) {
            int i;
            for (i = 0; i < n; i++)
                printf("%d", vet[i]);
        } 


    Como usar a função:
        exemplo:
        #include "vet.h" // biblioteca criada pelo usuário para tratar vetores;

        int main(void) {
            int n;
            do {
                scanf("%d", &n);
            } while (n <= 0);
            int vet[n];
            vet_leit(vet, n);
            .
            .
            .
            return 0;
        }
        

